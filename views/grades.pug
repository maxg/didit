mixin grades(reporevs, milestone)
  - let users = Math.max.apply(null, reporevs.map(r => r.users.length))
  - let spacer = new Array(Math.max(users, 0))
  div.grades
    table.table.table-striped.table-condensed.grades
      thead
        tr
          th
          th
          each _ in spacer
            th Username
          th Revision
          th(colspan=2) Grade
      tbody
        each reporev in reporevs
          - let repolink = `/${reporev.kind}/${reporev.proj}/${reporev.users.join('-')}`
          - let revlink = `${repolink}/${reporev.rev}`
          - let gradelink = milestone ? `/milestone${repolink}/${milestone}` : `${revlink}/grade`
          tr(class=`${reporev.grade ? '' : 'info'}`)
            td= reporev.kind
            td= reporev.proj
            each _, idx in spacer
              td: a(href=repolink)= reporev.users[idx]
            td: tt: a(href=revlink)= reporev.rev
            if reporev.grade
              td: .text-right: a(href=gradelink)= reporev.grade.score
              td.text-muted /&nbsp;#{reporev.grade.outof}
              each suite in reporev.grade.ungraded || []
                td.splitter
                each test in suite.testcases
                  if test.grade && test.grade.pass
                    td &#x2713;
                  else
                    td X
              each suite in reporev.grade.testsuites
                td.splitter
                each test in suite.testcases
                  if test.grade
                    td= test.grade.score
            else
              td: .text-right -
              td.text-muted / -
